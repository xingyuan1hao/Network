
下面看一下主要原理吧：


一，最重要的一点，断点续传需要服务器的支持，这个是必要条件。 
 传统的FTP  SERVER是不支持断点续传的，因为它不支持REST指令，传统的FTP指令（我是指服务器端指令）并不包括REST指令。    

  第二，客户端要知道使用REST等一系列指令来作断点续传。 
 
 看看断点续传的详细过程（FTP  SERVER）：  
 首先客户端使用REST指令来告诉FTP  SERVER它需要从文件的某个点开始传，接着用STOR或者RETR命令开始传文件，大概的命令的流程如下： 
 
 TYPE   I  
  200   Type   set   to   I. 
  PASV  
 227  Entering  Passive  Mode   (204,48,18,69,98,250) 
 REST  187392 
  350   Restarting  at   187392.   Send   STORE   or   RETRIEVE   to   initiate  transfer.  
  RETR  /pub/audio/pci/maestro-3/win2k/1056.zip 
  150   Opening   BINARY  mode   data   connection  for   /pub/audio/pci/maestro-3/win2k/1056.zip   (936098   bytes).  
 

  首先使用TYPE命令告诉FTP   SERVER使用BINARY模式传送文件；  
 然后使用PASV命令告诉FTP   SERVER使用被动打开模式来传送文件； 
 接着使用REST   187392指令告诉FTP   SERVER要从文件的187392字节开始传送； 
  最后使用RETR指令来传送文件。 
 
 从上面可以看出，这个FTP   SERVER支持REST指令，有的FTP   SERVER（特别的老的）是不支持这个指令的，这时即使FTP   CLIENT支持断点续传也一点用都没有！ 
 
  支持断点的FTP  SERVER：Serv-U FTP，还有一系列的新出现的FTP  SERVER；
  不支持断点的：IIS4以前版本所带的都不行，IIS5   有，不家可以测试一下，登录进FTP   SERVER，然后输入REST   1000命令，看服务器是否认识，认识就是支持断点。

其实FTP断点续传的原理很简单，可分为断点下载和断点上传。


一、下载：
1、向服务器发送“REST + 本地文件长度”命令，告诉服务器，客户端要断点下载了。这时服务器还不知道客户端要下载哪个文件；
2、向服务器发送“RETR + 文件名”命令，通知服务器要下载的文件名，这时服务器开始定位文件指针读文件并发送数据。
3、客户端定位本地文件指针（文件末尾）；
4、两端的准备工作都做完了以后，客户端创建socket，以被动或非被动方式建立数据通道，循环调用recv接收数据并追加入本地文件；

二、上传：
1、获取服务器上和本地要上传文件的同名文件大小；
2、向服务器发送“APPE ＋文件名”，通知服务器，接下来从数据通道发送给你的数据要附加到这个文件末尾。
3、定位本地文件指针（和FTP上文件大小相同的位置）
4、从文件指针处读数据并发送。

这里重点说说PASV模式，即被动模式，这是FTP命令里比较不容易理解的一个，这条命令请求服务器在某个端口（非FTP默认端口或控制命令端口）创建一个监听socket，服务器创建的端口号会在客户端的控制命令通道上得到响应。得到这个端口号后，客户端就可以创建新的socket（数据通道）connect过去，并进行文件传输等工作。否则，如果为非被动模式，那么监听的socket由客户端创建，服务器connect过来。
对于这条命令的存在我是这么理解的，存在这么一种情况：客户端的IP是个内网的IP，服务器的IP是个外网的，当进行数据传输时内网的IP对于服务器是不可见的，只有由服务器启动监听socket才能建立数据通道，所以必须以被动模式进行。

现在有不少软件可实现多线程下载.如NetAnts,JetCar等,其实多线程下载的原理并不复杂,主要的两项技术就是多线程和断点下载。程序中开启多个线程，每个线程利用断点下载，分别下载文件的不同部分，下载完后合并，就可以了。多线程编程很多书已有介绍，这里不再重复，关于断点下载，MFC中提供的CInternetFile类可实现HTTP的断点下载，但无法实现FTP的断点下载。因此，我们只好从FTP协议中的命令入手，自己编写个FTP类，来实现多线程下载。本人编写的CMultiFTP类（在WIN2000+IIS5。0下测试成功）已在CSDN发表。
FTP指令的详细信息，大家可从http://info.internet.isi.edu/in-notes/rfc/处获得，这里给大家介绍下与多线程下载有关的几个指令极其格式：
USER〈USERNAME〉：登陆FTP的用户名，执行成功返回220；
PASS〈PASSWORD〉：密码，执行成功返回230；
REST〈POS〉：指定文件下载的开始位置，执行成功返回350；
SIZE〈FILENAME〉：文件大小，执行成功返回213；
PASV：建立数据连接，同时取得FTP服务器下载文件时用的端口号，执行成功返回227；
TYPE：指定下载文件的类型，参数为I是二进制文件，为A是字符文件，执行成功返回200；
RETR〈FILENAME〉：下载文件，执行成功返回125；

